<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- spring-context自动开启注解-->
    <!-- 这里一定要精确，spring作用在业务层，那么就放在业务层-->
    <context:component-scan base-package="cn.ljp.ssm.service">
        <!-- 哪些对象不扔进ioc-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>


    <!-- 加载配置文件 分离开来不写死，更好的使用 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- spring整合mybatis:0.配置连接池  1.配置sqlSessionFactory 2.配置扫描包-->
    <!-- 0.配置连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--   1.配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage"  value="cn.ljp.ssm.domain"></property>  <!-- 起别名-->
    </bean>
    <!--   2.配置扫描包-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ljp.ssm.dao"></property>
    </bean>



    <!-- 配置事务:0.配置事务管理器 1.配置事务通知类型（数据库操作的类型） 2.配置切入点（位置）-->
    <!-- 0.注册事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->
    <!-- 1.配置事务管理器的事务通知的属性-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>  <!-- 以后写service方法的时候，注意方法的命名，例如要以find开头-->
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>  <!-- 如果是find开头的方法，都是只读，不操作数据库-->
            <tx:method name="*"  isolation="DEFAULT" read-only="false" propagation="REQUIRED"/>  <!-- 采用数据默认的数据隔级别-->
        </tx:attributes>
    </tx:advice>
    <!-- 2.配置事务的插入点-->
    <aop:config>  <!-- public是可以省略的，第一个*代表的是返回值，第二个表示匹配后缀为ServiceImpl命名的-->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.ljp.ssm.service.impl.*.*(..))"/>
    </aop:config>
</beans>